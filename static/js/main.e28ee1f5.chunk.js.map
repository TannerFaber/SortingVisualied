{"version":3,"sources":["ArraySorting.js","animations.js","App.js","index.js"],"names":["ArraySorting","props","resetArray","arraySize","maxValue","array","Array","from","length","Math","floor","random","setState","makeBars","bars","i","push","className","key","style","height","width","backgroundColor","bubbleSort","buttons","document","getElementsByClassName","disabled","disableBtn","animations","console","log","swapped","len","j","tmp","getBubbleSortAnimations","state","arrayBars","barOneIdx","barTwoIdx","compare","primary","barOneStyle","barTwoStyle","color","setTimeout","newHeight","enableBtn","this","onClick","React","Component","App","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.e28ee1f5.chunk.js","sourcesContent":["import React from \"react\";\nimport { getBubbleSortAnimations } from \"./animations\";\n\n//=================================== Main Function ===================================\nconst ARRAYSIZE = 10;\nconst MAXVALUE = 100;\nconst ANIMATION_SPEED_MS = 100;\nconst PRIMARY_COLOR = \"aqua\";\nconst SECONDARY_COLOR = \"red\";\nconst FINISH_COLOR = \"lightgreen\";\n\nexport class ArraySorting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { array: [] };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const array = generateArray(ARRAYSIZE, MAXVALUE);\n    this.setState({ array });\n  };\n\n  // makeBars will return an array of div objects that have\n  makeBars = array => {\n    var bars = [];\n    for (\n      var i = 0;\n      i < array.length;\n      i++ // for (var i in array)\n    ) {\n      bars.push(\n        // maybe make this an object with a height and index property for easy sorting\n        <div\n          className=\"array-bar\"\n          key={i}\n          style={{\n            height: `${array[i]}%`,\n            width: `${100 / array.length}%`,\n            backgroundColor: `${PRIMARY_COLOR}`\n          }}\n        ></div>\n      );\n    }\n    return bars;\n  };\n\n  bubbleSort = () => {\n    // r[1]\n    disableBtn();\n    const animations = getBubbleSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      // This object that is returned from the animation function is weird\n      // its form is [num,num,bool,bool]\n      // the first bool is if this is a comparision step\n      // the second bool is to control the coloring of the bars\n      const [barOneIdx, barTwoIdx, compare, primary] = animations[i];\n\n      if (compare) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        //const currentColor = arrayBars[barOneIdx].style.backgroundColor;\n        const color = primary ? PRIMARY_COLOR : SECONDARY_COLOR;\n        // currentColor === PRIMARY_COLOR ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}%`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    setTimeout(() => {\n      enableBtn();\n    }, animations.length * ANIMATION_SPEED_MS);\n  };\n\n  render() {\n    return (\n      <div className=\"container segment\">\n        <div className=\"ui menu\">\n          <div className=\"item\">\n            <button onClick={this.bubbleSort} className=\"ui primary button\">\n              Run\n            </button>\n          </div>\n          <div className=\"item\">\n            <button onClick={this.resetArray} className=\"ui button\">\n              Reset\n            </button>\n          </div>\n        </div>\n        <div className=\"array\">{this.makeBars(this.state.array)}</div>\n      </div>\n    );\n  }\n}\n\n// ================================== Helper Functions ===================================\n\n// return an array with length arraySize where elements are less than or equal to maxValue\n// https://stackoverflow.com/questions/5836833/create-an-array-with-random-values\nfunction generateArray(arraySize, maxValue) {\n  var array = Array.from({ length: arraySize }, () =>\n    Math.floor(Math.random() * maxValue)\n  );\n  return array;\n}\n\nfunction disableBtn() {\n  let buttons = document.getElementsByClassName(\"button\");\n  for (let i = 0; i < buttons.length; i++) {\n    buttons[i].disabled = true;\n  }\n}\n\nfunction enableBtn() {\n  let buttons = document.getElementsByClassName(\"button\");\n  for (let i = 0; i < buttons.length; i++) {\n    buttons[i].disabled = false;\n  }\n}\n\nexport default ArraySorting;\n\n// =========================================================================================\n// footnotes:\n// =========================================================================================\n// r[1] https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial/blob/master/src/SortingVisualizer/SortingVisualizer.jsx\n","// ======================= OverView =======================\n// the amimations array will need to show what two elements are being compared\n// by changing the background color of each element\n// then swapping the values if they need to be swapped\n// then changing the background color back to the default color\n\n// ========================= TODO =========================\n// More testing should be done to see if the sorting is correct!\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  console.log(\"pre: \" + array);\n  if (array.length <= 1) return array;\n\n  let len = array.length;\n  let swapped;\n  do {\n    for (let i = 0; i < len - 1; i++) {\n      swapped = false;\n      for (let j = 0; j < len - i - 1; j++) {\n        if (array[j] > array[j + 1]) {\n          let tmp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = tmp;\n          swapped = true;\n        }\n        // Dealing with the animations\n        // push the indexes we are comparing\n        animations.push([j, j + 1, true, false]);\n        // push the new heights of the elements\n        // [index, height]\n        animations.push([j, array[j], false]);\n        animations.push([j + 1, array[j + 1], false]);\n        // push the indexes one more time to change color back to default\n        animations.push([j, j + 1, true, true]);\n      }\n    }\n  } while (swapped);\n\n  console.log(\"post: \" + array);\n  console.log(animations);\n  return animations;\n}\n","import React from \"react\";\nimport ArraySorting from \"./ArraySorting.js\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ArraySorting />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}