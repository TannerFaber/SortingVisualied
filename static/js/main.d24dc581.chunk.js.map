{"version":3,"sources":["animations.js","ArraySorting.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","generateArray","arraySize","maxValue","Array","from","random","disableBtn","document","getElementsByClassName","disabled","buttons","enableBtn","ArraySorting","props","resetArray","getElementById","value","setState","makeBars","bars","className","key","style","height","width","backgroundColor","bubbleSort","swapped","len","tmp","getBubbleSortAnimations","state","arrayBars","barOneIdx","barTwoIdx","compare","primary","barOneStyle","barTwoStyle","color","setTimeout","speed","newHeight","mergeSort","handleChange","evt","parseInt","target","this","onClick","id","type","min","max","onChange","React","Component","App","ReactDOM","render","querySelector"],"mappings":"iNAkDO,SAASA,EAAuBC,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,ECyGT,SAASgB,EAAcC,EAAWC,GAIhC,OAHYC,MAAMC,KAAK,CAAEnB,OAAQgB,IAAa,kBAC5CR,KAAKC,MAAMD,KAAKY,SAAWH,MAK/B,SAASI,IACPC,SAASC,uBAAuB,UAAU,GAAGC,UAAW,EAExD,IADA,IAAIC,EAAUH,SAASC,uBAAuB,UACrCZ,EAAI,EAAGA,EAAIc,EAAQzB,OAAQW,IAClCc,EAAQd,GAAGa,UAAW,EAI1B,SAASE,IACPJ,SAASC,uBAAuB,UAAU,GAAGC,UAAW,EAExD,IADA,IAAIC,EAAUH,SAASC,uBAAuB,UACrCZ,EAAI,EAAGA,EAAIc,EAAQzB,OAAQW,IAClCc,EAAQd,GAAGa,UAAW,EAIXG,MA5Kf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,WAAa,WACX,IAAM/B,EAAQiB,EAjBA,GACD,KAiBbO,SAASQ,eAAe,cAAcC,MAAQ,KAC9C,EAAKC,SAAS,CAAElC,WAZC,EAgBnBmC,SAAW,SAAAnC,GAET,IADA,IAAIoC,EAAO,GAELvB,EAAI,EACRA,EAAIb,EAAME,OACVW,IAEAuB,EAAKrB,KAEH,yBACEsB,UAAU,YACVC,IAAKzB,EACL0B,MAAO,CACLC,OAAO,GAAD,OAAKxC,EAAMa,GAAX,KACN4B,MAAM,GAAD,OAAK,IAAMzC,EAAME,OAAjB,KACLwC,gBAAgB,GAAD,OAnCL,YAwClB,OAAON,GApCU,EAuCnBO,WAAa,WACXpB,IAGA,IAFA,IAAMtB,EDvCH,SAAiCD,GAKtC,IAJA,IAGI4C,EAHE3C,EAAa,GAEf4C,EAAM7C,EAAME,OAEPW,EAAI,EAAGA,EAAIgC,EAAM,EAAGhC,IAAK,CAChC+B,GAAU,EACV,IAAK,IAAI9B,EAAI,EAAGA,EAAI+B,EAAMhC,EAAI,EAAGC,IAAK,CACpC,GAAId,EAAMc,GAAKd,EAAMc,EAAI,GAAI,CAC3B,IAAIgC,EAAM9C,EAAMc,GAChBd,EAAMc,GAAKd,EAAMc,EAAI,GACrBd,EAAMc,EAAI,GAAKgC,EACfF,GAAU,EAIZ3C,EAAWc,KAAK,CAACD,EAAGA,EAAI,GAAG,GAAM,IAGjCb,EAAWc,KAAK,CAACD,EAAGd,EAAMc,IAAI,IAC9Bb,EAAWc,KAAK,CAACD,EAAI,EAAGd,EAAMc,EAAI,IAAI,IAEtCb,EAAWc,KAAK,CAACD,EAAGA,EAAI,GAAG,GAAM,IAEnC,IAAK8B,EACH,MAGJ,OAAO3C,ECWc8C,CAAwB,EAAKC,MAAMhD,OAChDiD,EAAYzB,SAASC,uBAAuB,aAHjC,WAIRZ,GAJQ,kBASkCZ,EAAWY,GAT7C,GASRqC,EATQ,KASGC,EATH,KAScC,EATd,KASuBC,EATvB,KAWf,GAAID,EAAS,CACX,IAAME,EAAcL,EAAUC,GAAWX,MACnCgB,EAAcN,EAAUE,GAAWZ,MACnCiB,EAAQH,EAzDA,OACE,MAyDhBI,YAAW,WACTH,EAAYZ,gBAAkBc,EAC9BD,EAAYb,gBAAkBc,IAC7B3C,EAAI,EAAKmC,MAAMU,YAElBD,YAAW,WAAO,IAAD,cACgBxD,EAAWY,GAD3B,GACRqC,EADQ,KACGS,EADH,KAEKV,EAAUC,GAAWX,MAC7BC,OAAZ,UAAwBmB,EAAxB,OACC9C,EAAI,EAAKmC,MAAMU,QApBb7C,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,GAuBT4C,YAAW,WACT7B,MACC3B,EAAWC,OAAS,EAAK8C,MAAMU,QApEjB,EAwEnBE,UAAY,WACVrC,IAEA,IADA,IAAMtB,EAAaF,EAAuB,EAAKiD,MAAMhD,OAFrC,WAGPa,GACP,IAAMoC,EAAYzB,SAASC,uBAAuB,aAElD,GADsBZ,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACVqC,EADU,KACCC,EADD,KAEXG,EAAcL,EAAUC,GAAWX,MACnCgB,EAAcN,EAAUE,GAAWZ,MACnCiB,EAAQ3C,EAAI,IAAM,EArFR,MADF,OAuFd4C,YAAW,WACTH,EAAYZ,gBAAkBc,EAC9BD,EAAYb,gBAAkBc,IAC7B3C,EAAI,EAAKmC,MAAMU,YAElBD,YAAW,WAAO,IAAD,cACgBxD,EAAWY,GAD3B,GACRqC,EADQ,KACGS,EADH,KAEKV,EAAUC,GAAWX,MAC7BC,OAAZ,UAAwBmB,EAAxB,OACC9C,EAAI,EAAKmC,MAAMU,QAjBb7C,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,GAoBT4C,YAAW,WACT7B,MACC3B,EAAWC,OAAS,EAAK8C,MAAMU,QAjGjB,EAoGnBG,aAAe,SAAAC,GACb,IACM9D,EAAQiB,EADDP,KAAKC,MAAyC,MAAlCoD,SAASD,EAAIE,OAAO/B,OAAS,IA3GzC,KA8Gb,EAAKC,SAAS,CAAElC,UAEhBiB,EAAcP,KAAKC,MAAyC,MAAlCoD,SAASD,EAAIE,OAAO/B,OAAS,MAxGvD,EAAKe,MAAQ,CAAEhD,MAAO,GAAIkB,UAAW,GAAIwC,MAAO,IAF/B,EADrB,iFAOIO,KAAKlC,eAPT,+BA8GI,OACE,yBAAKM,UAAU,qBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,QACb,4BAAQ6B,QAASD,KAAKtB,WAAYN,UAAU,qBAA5C,gBAIF,yBAAKA,UAAU,QACb,4BAAQ6B,QAASD,KAAKL,UAAWvB,UAAU,qBAA3C,eAIF,yBAAKA,UAAU,QACb,4BAAQ6B,QAASD,KAAKlC,WAAYM,UAAU,aAA5C,UAIF,yBAAKA,UAAU,kBACb,2BACEA,UAAU,SACV8B,GAAG,aACHC,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,SAAUN,KAAKJ,iBAIrB,yBAAKxB,UAAU,SAAS4B,KAAK9B,SAAS8B,KAAKjB,MAAMhD,aA3IzD,GAAkCwE,IAAMC,W,MCCzBC,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCHNsC,IAASC,OAAO,kBAAC,EAAD,MAASpD,SAASqD,cAAc,W","file":"static/js/main.d24dc581.chunk.js","sourcesContent":["// ======================= OverView =======================\n// the amimations array will need to show what two elements are being compared\n// by changing the background color of each element\n// then swapping the values if they need to be swapped\n// then changing the background color back to the default color\n\n// ========================= TODO =========================\n// More testing should be done to see if the sorting is correct!\n// Add optomization to bubble sort to stop running if array is sorted\n\n// =======================================================================\n// ==============================BubbleSort===============================\n// =======================================================================\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n\n  let len = array.length;\n  let swapped;\n  for (let i = 0; i < len - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < len - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        let tmp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = tmp;\n        swapped = true;\n      }\n      // Dealing with the animations\n      // push the indexes we are comparing\n      animations.push([j, j + 1, true, false]);\n      // push the new heights of the elements\n      // [index, height]\n      animations.push([j, array[j], false]);\n      animations.push([j + 1, array[j + 1], false]);\n      // push the indexes one more time to change color back to default\n      animations.push([j, j + 1, true, true]);\n    }\n    if (!swapped) {\n      break;\n    }\n  }\n  return animations;\n}\n\n// =======================================================================\n// ===============================MergeSort===============================\n// =======================================================================\n// https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial/blob/master/src/sortingAlgorithms/sortingAlgorithms.js\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from \"react\";\nimport { getBubbleSortAnimations } from \"./animations\";\nimport { getMergeSortAnimations } from \"./animations\";\n\n//=================================== Main Function ===================================\nconst ARRAYSIZE = 50;\nconst MAXVALUE = 100;\n// const ANIMATION_SPEED_MS = 10;\nconst PRIMARY_COLOR = \"aqua\";\nconst SECONDARY_COLOR = \"red\";\n\nexport class ArraySorting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { array: [], arraySize: 50, speed: 30 };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const array = generateArray(ARRAYSIZE, MAXVALUE);\n    document.getElementById(\"changeSize\").value = \"50\";\n    this.setState({ array });\n  };\n\n  // makeBars will return an array of div objects that have\n  makeBars = array => {\n    var bars = [];\n    for (\n      var i = 0;\n      i < array.length;\n      i++ // for (var i in array)\n    ) {\n      bars.push(\n        // maybe make this an object with a height and index property for easy sorting\n        <div\n          className=\"array-bar\"\n          key={i}\n          style={{\n            height: `${array[i]}%`,\n            width: `${100 / array.length}%`,\n            backgroundColor: `${PRIMARY_COLOR}`\n          }}\n        ></div>\n      );\n    }\n    return bars;\n  };\n\n  bubbleSort = () => {\n    disableBtn();\n    const animations = getBubbleSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      // This object that is returned from the animation function is weird\n      // its form is [num,num,bool,bool]\n      // the first bool is if this is a comparision step\n      // the second bool is to control the coloring of the bars\n      const [barOneIdx, barTwoIdx, compare, primary] = animations[i];\n\n      if (compare) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = primary ? PRIMARY_COLOR : SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}%`;\n        }, i * this.state.speed);\n      }\n    }\n    setTimeout(() => {\n      enableBtn();\n    }, animations.length * this.state.speed);\n  };\n\n  //https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial/blob/master/src/SortingVisualizer/SortingVisualizer.jsx\n  mergeSort = () => {\n    disableBtn();\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}%`;\n        }, i * this.state.speed);\n      }\n    }\n    setTimeout(() => {\n      enableBtn();\n    }, animations.length * this.state.speed);\n  };\n\n  handleChange = evt => {\n    const size = Math.floor((parseInt(evt.target.value) + 3) * 1.65);\n    const array = generateArray(size, MAXVALUE);\n\n    this.setState({ array });\n\n    generateArray(Math.floor((parseInt(evt.target.value) + 3) * 1.65));\n  };\n  render() {\n    return (\n      <div className=\"container segment\">\n        <div className=\"ui menu\">\n          <div className=\"item\">\n            <button onClick={this.bubbleSort} className=\"ui primary button\">\n              Bubble Sort\n            </button>\n          </div>\n          <div className=\"item\">\n            <button onClick={this.mergeSort} className=\"ui primary button\">\n              Merge Sort\n            </button>\n          </div>\n          <div className=\"item\">\n            <button onClick={this.resetArray} className=\"ui button\">\n              Reset\n            </button>\n          </div>\n          <div className=\"slidecontainer\">\n            <input\n              className=\"slider\"\n              id=\"changeSize\"\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              onChange={this.handleChange}\n            />\n          </div>\n        </div>\n        <div className=\"array\">{this.makeBars(this.state.array)}</div>\n      </div>\n    );\n  }\n}\n\n// ================================== Helper Functions ===================================\n\n// return an array with length arraySize where elements are less than or equal to maxValue\n// https://stackoverflow.com/questions/5836833/create-an-array-with-random-values\nfunction generateArray(arraySize, maxValue) {\n  var array = Array.from({ length: arraySize }, () =>\n    Math.floor(Math.random() * maxValue)\n  );\n  return array;\n}\n\nfunction disableBtn() {\n  document.getElementsByClassName(\"slider\")[0].disabled = true;\n  let buttons = document.getElementsByClassName(\"button\");\n  for (let i = 0; i < buttons.length; i++) {\n    buttons[i].disabled = true;\n  }\n}\n\nfunction enableBtn() {\n  document.getElementsByClassName(\"slider\")[0].disabled = false;\n  let buttons = document.getElementsByClassName(\"button\");\n  for (let i = 0; i < buttons.length; i++) {\n    buttons[i].disabled = false;\n  }\n}\n\nexport default ArraySorting;\n","import React from \"react\";\nimport ArraySorting from \"./ArraySorting.js\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ArraySorting />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}