{"version":3,"sources":["animations.js","ArraySorting.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSort","items","left","right","index","pivot","swap","partition","leftIndex","rightIndex","temp","generateArray","arraySize","maxValue","Array","from","random","disableBtn","document","getElementsByClassName","disabled","buttons","enableBtn","ArraySorting","props","resetArray","state","setState","bubbleSort","swapped","len","tmp","getBubbleSortAnimations","arrayBars","barOneIdx","barTwoIdx","compare","primary","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","speed","newHeight","height","colorString","barStyle","background","indexOne","indexTwo","mergeSort","handleChange","evt","parseInt","target","value","makeBars","bars","className","key","width","this","onClick","id","type","min","max","onChange","React","Component","App","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.d2ab22b1.chunk.js","sourcesContent":["// ======================= OverView =======================\n// the amimations array will need to show what two elements are being compared\n// by changing the background color of each element\n// then swapping the values if they need to be swapped\n// then changing the background color back to the default color\n\n// ========================= TODO =========================\n// More testing should be done to see if the sorting is correct!\n// Add optomization to bubble sort to stop running if array is sorted\n\n// =======================================================================\n// ==============================BubbleSort===============================\n// =======================================================================\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n\n  let len = array.length;\n  let swapped;\n  for (let i = 0; i < len - 1; i++) {\n    swapped = false;\n    for (let j = 0; j < len - i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        let tmp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = tmp;\n        swapped = true;\n      }\n      // Dealing with the animations\n      // push the indexes we are comparing\n      animations.push([j, j + 1, true, false]);\n      // push the new heights of the elements\n      // [index, height]\n      animations.push([j, array[j], false]);\n      animations.push([j + 1, array[j + 1], false]);\n      // push the indexes one more time to change color back to default\n      animations.push([j, j + 1, true, true]);\n    }\n    if (!swapped) {\n      break;\n    }\n  }\n  return animations;\n}\n\n// =======================================================================\n// ===============================MergeSort===============================\n// =======================================================================\n// https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial/blob/master/src/sortingAlgorithms/sortingAlgorithms.js\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n// =======================================================================\n// ===============================QuickSort===============================\n// =======================================================================\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  array = quickSort(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(items, left, right, animations) {\n  var index;\n  if (items.length > 1) {\n    index = partition(items, left, right, animations); //index returned from partition\n    if (left < index - 1) {\n      //more elements on the left side of the pivot\n      quickSort(items, left, index - 1, animations);\n    }\n    if (index < right) {\n      //more elements on the right side of the pivot\n      quickSort(items, index, right, animations);\n    }\n  }\n  return items;\n}\n\nfunction partition(items, left, right, animations) {\n  var pivot = items[Math.floor((right + left) / 2)], //middle element\n    i = left, //left pointer\n    j = right; //right pointer\n  animations.push([\"color\", \"PIVOT_COLOR\", Math.floor((right + left) / 2)]); //highlight the pivot element\n  while (i <= j) {\n    while (items[i] < pivot) {\n      animations.push([\"color\", \"SECONDARY_COLOR\", i]); // change color\n      animations.push([\"color\", \"PRIMARY_COLOR\", i]); // change back\n      i++;\n    }\n    while (items[j] > pivot) {\n      animations.push([\"color\", \"SECONDARY_COLOR\", j]); // change color\n      animations.push([\"color\", \"PRIMARY_COLOR\", j]); // change back\n      j--;\n    }\n    if (i <= j) {\n      swap(items, i, j, animations); //sawpping two elements\n      i++;\n      j--;\n    }\n  }\n  animations.push([\"color\", \"PRIMARY_COLOR\", Math.floor((right + left) / 2)]); //un-highlight the pivot element\n  return i;\n}\n\nfunction swap(items, leftIndex, rightIndex, animations) {\n  var temp = items[leftIndex];\n  items[leftIndex] = items[rightIndex];\n  items[rightIndex] = temp;\n  animations.push([\"color\", \"SECONDARY_COLOR\", leftIndex, rightIndex]);\n  animations.push([\n    \"swap\",\n    leftIndex,\n    items[leftIndex],\n    rightIndex,\n    items[rightIndex]\n  ]); // type, index, newvalue, index, newvalue\n  animations.push([\"color\", \"PRIMARY_COLOR\", leftIndex, rightIndex]);\n}\n","import React from \"react\";\nimport { getBubbleSortAnimations } from \"./animations\";\nimport { getMergeSortAnimations } from \"./animations\";\nimport { getQuickSortAnimations } from \"./animations\";\n\n//=================================== Main Function ===================================\nconst MAXVALUE = 100;\nconst PRIMARY_COLOR = \"aqua\";\nconst SECONDARY_COLOR = \"red\";\nconst PIVOT_COLOR = \"orange\";\n\nexport class ArraySorting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { array: [], arraySize: 50, speed: 30 };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const array = generateArray(this.state.arraySize, MAXVALUE);\n    this.setState({ array });\n  };\n\n  bubbleSort = () => {\n    disableBtn();\n    const animations = getBubbleSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      // This object that is returned from the animation function is weird\n      // its form is [num,num,bool,bool]\n      // the first bool is if this is a comparision step\n      // the second bool is to control the coloring of the bars\n      const [barOneIdx, barTwoIdx, compare, primary] = animations[i];\n\n      if (compare) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = primary ? PRIMARY_COLOR : SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}%`;\n        }, i * this.state.speed);\n      }\n    }\n    setTimeout(() => {\n      enableBtn();\n    }, animations.length * this.state.speed);\n  };\n\n  quickSort = () => {\n    disableBtn();\n    const animations = getQuickSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    for (let i = 0; i < animations.length; i++) {\n      if (animations[i].length === 3) {\n        const index = animations[i][2];\n        const colorString = animations[i][1];\n        let color;\n        if (colorString === \"PRIMARY_COLOR\") {\n          color = PRIMARY_COLOR;\n        } else if (colorString === \"SECONDARY_COLOR\") {\n          color = SECONDARY_COLOR;\n        } else {\n          color = PIVOT_COLOR;\n        }\n        const barStyle = arrayBars[index].style;\n        setTimeout(() => {\n          barStyle.background = color;\n        }, i * this.state.speed);\n      } else if (animations[i].length === 4) {\n        const indexOne = animations[i][2];\n        const indexTwo = animations[i][3];\n        const colorString = animations[i][1];\n        let color;\n        if (colorString === \"PRIMARY_COLOR\") {\n          color = PRIMARY_COLOR;\n        } else if (colorString === \"SECONDARY_COLOR\") {\n          color = SECONDARY_COLOR;\n        }\n        const barOneStyle = arrayBars[indexOne].style;\n        const barTwoStyle = arrayBars[indexTwo].style;\n        setTimeout(() => {\n          barOneStyle.background = color;\n          barTwoStyle.background = color;\n        }, i * this.state.speed);\n      } else {\n        const indexOne = animations[i][1];\n        const indexTwo = animations[i][3];\n\n        const barOneStyle = arrayBars[indexOne].style;\n        const barTwoStyle = arrayBars[indexTwo].style;\n        setTimeout(() => {\n          barOneStyle.height = `${animations[i][2]}%`;\n          barTwoStyle.height = `${animations[i][4]}%`;\n        }, i * this.state.speed);\n      }\n    }\n    setTimeout(() => {\n      enableBtn();\n    }, animations.length * this.state.speed);\n  };\n\n  //https://github.com/clementmihailescu/Sorting-Visualizer-Tutorial/blob/master/src/SortingVisualizer/SortingVisualizer.jsx\n  mergeSort = () => {\n    disableBtn();\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}%`;\n        }, i * this.state.speed);\n      }\n    }\n    setTimeout(() => {\n      enableBtn();\n    }, animations.length * this.state.speed);\n  };\n\n  handleChange = evt => {\n    const arraySize = Math.floor((parseInt(evt.target.value) + 3) * 1.75);\n    const array = generateArray(arraySize, MAXVALUE);\n    const speed = (1000 / arraySize) * 1.6;\n    this.setState({ array, speed, arraySize });\n\n    generateArray(Math.floor((parseInt(evt.target.value) + 3) * 1.75));\n  };\n  render() {\n    return (\n      <div className=\"container segment\">\n        <div className=\"ui menu\">\n          <div className=\"item\">\n            <button onClick={this.bubbleSort} className=\"ui primary button\">\n              Bubble Sort\n            </button>\n          </div>\n          <div className=\"item\">\n            <button onClick={this.mergeSort} className=\"ui primary button\">\n              Merge Sort\n            </button>\n          </div>\n          <div className=\"item\">\n            <button onClick={this.quickSort} className=\"ui primary button\">\n              Quick Sort\n            </button>\n          </div>\n          <div className=\"item\">\n            <button onClick={this.resetArray} className=\"ui button\">\n              Reset\n            </button>\n          </div>\n          <div className=\"slidecontainer\">\n            <input\n              className=\"slider\"\n              id=\"changeSize\"\n              type=\"range\"\n              min=\"0\"\n              max=\"100\"\n              onChange={this.handleChange}\n            />\n          </div>\n        </div>\n        <div className=\"array\">{this.makeBars(this.state.array)}</div>\n      </div>\n    );\n  }\n  // makeBars will return an array of div objects that have\n  makeBars = array => {\n    var bars = [];\n    for (\n      var i = 0;\n      i < array.length;\n      i++ // for (var i in array)\n    ) {\n      bars.push(\n        // maybe make this an object with a height and index property for easy sorting\n        <div\n          className=\"array-bar\"\n          key={i}\n          style={{\n            height: `${array[i]}%`,\n            width: `${100 / array.length}%`,\n            backgroundColor: `${PRIMARY_COLOR}`\n          }}\n        ></div>\n      );\n    }\n    return bars;\n  };\n}\n\n// ================================== Helper Functions ===================================\n\n// return an array with length arraySize where elements are less than or equal to maxValue\n// https://stackoverflow.com/questions/5836833/create-an-array-with-random-values\nfunction generateArray(arraySize, maxValue) {\n  var array = Array.from({ length: arraySize }, () =>\n    Math.floor(Math.random() * maxValue)\n  );\n  return array;\n}\n\nfunction disableBtn() {\n  document.getElementsByClassName(\"slider\")[0].disabled = true;\n  let buttons = document.getElementsByClassName(\"button\");\n  for (let i = 0; i < buttons.length; i++) {\n    buttons[i].disabled = true;\n  }\n}\n\nfunction enableBtn() {\n  document.getElementsByClassName(\"slider\")[0].disabled = false;\n  let buttons = document.getElementsByClassName(\"button\");\n  for (let i = 0; i < buttons.length; i++) {\n    buttons[i].disabled = false;\n  }\n}\nexport default ArraySorting;\n","import React from \"react\";\nimport ArraySorting from \"./ArraySorting.js\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ArraySorting />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}